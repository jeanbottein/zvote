// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

// This was generated using spacetimedb cli version 1.6.0 (commit 3c16edb3503eab8aad562e011d7fb452e051267d).

/* eslint-disable */
/* tslint:disable */
import {
  AlgebraicType as __AlgebraicTypeValue,
  BinaryReader as __BinaryReader,
  BinaryWriter as __BinaryWriter,
  ClientCache as __ClientCache,
  ConnectionId as __ConnectionId,
  DbConnectionBuilder as __DbConnectionBuilder,
  DbConnectionImpl as __DbConnectionImpl,
  Identity as __Identity,
  SubscriptionBuilderImpl as __SubscriptionBuilderImpl,
  TableCache as __TableCache,
  TimeDuration as __TimeDuration,
  Timestamp as __Timestamp,
  deepEqual as __deepEqual,
  type AlgebraicType as __AlgebraicTypeType,
  type AlgebraicTypeVariants as __AlgebraicTypeVariants,
  type CallReducerFlags as __CallReducerFlags,
  type ErrorContextInterface as __ErrorContextInterface,
  type Event as __Event,
  type EventContextInterface as __EventContextInterface,
  type ReducerEventContextInterface as __ReducerEventContextInterface,
  type SubscriptionEventContextInterface as __SubscriptionEventContextInterface,
  type TableHandle as __TableHandle,
} from "spacetimedb";

// Import and reexport all reducer arg types
import { Approve } from "./approve_reducer.ts";
export { Approve };
import { CastJudgment } from "./cast_judgment_reducer.ts";
export { CastJudgment };
import { CreateVote } from "./create_vote_reducer.ts";
export { CreateVote };
import { DeleteVote } from "./delete_vote_reducer.ts";
export { DeleteVote };
import { EnsureServerInfo } from "./ensure_server_info_reducer.ts";
export { EnsureServerInfo };
import { GrantAccessByToken } from "./grant_access_by_token_reducer.ts";
export { GrantAccessByToken };
import { SetApprovalBallot } from "./set_approval_ballot_reducer.ts";
export { SetApprovalBallot };
import { SetApprovals } from "./set_approvals_reducer.ts";
export { SetApprovals };
import { SubmitApprovalBallot } from "./submit_approval_ballot_reducer.ts";
export { SubmitApprovalBallot };
import { SubmitCompleteJudgmentBallot } from "./submit_complete_judgment_ballot_reducer.ts";
export { SubmitCompleteJudgmentBallot };
import { SubmitJudgmentBallot } from "./submit_judgment_ballot_reducer.ts";
export { SubmitJudgmentBallot };
import { Unapprove } from "./unapprove_reducer.ts";
export { Unapprove };
import { WithdrawApprovalBallot } from "./withdraw_approval_ballot_reducer.ts";
export { WithdrawApprovalBallot };
import { WithdrawJudgments } from "./withdraw_judgments_reducer.ts";
export { WithdrawJudgments };

// Import and reexport all table handle types
import { ApprovalTableHandle } from "./approval_table.ts";
export { ApprovalTableHandle };
import { JudgmentTableHandle } from "./judgment_table.ts";
export { JudgmentTableHandle };
import { MjSummaryTableHandle } from "./mj_summary_table.ts";
export { MjSummaryTableHandle };
import { ServerInfoTableHandle } from "./server_info_table.ts";
export { ServerInfoTableHandle };
import { VoteTableHandle } from "./vote_table.ts";
export { VoteTableHandle };
import { VoteAccessTableHandle } from "./vote_access_table.ts";
export { VoteAccessTableHandle };
import { VoteOptionTableHandle } from "./vote_option_table.ts";
export { VoteOptionTableHandle };

// Import and reexport all types
import { Approval } from "./approval_type.ts";
export { Approval };
import { Judgment } from "./judgment_type.ts";
export { Judgment };
import { JudgmentEntry } from "./judgment_entry_type.ts";
export { JudgmentEntry };
import { Mention } from "./mention_type.ts";
export { Mention };
import { MjSummary } from "./mj_summary_type.ts";
export { MjSummary };
import { ServerInfo } from "./server_info_type.ts";
export { ServerInfo };
import { Vote } from "./vote_type.ts";
export { Vote };
import { VoteAccess } from "./vote_access_type.ts";
export { VoteAccess };
import { VoteOption } from "./vote_option_type.ts";
export { VoteOption };
import { VotingSystem } from "./voting_system_type.ts";
export { VotingSystem };

const REMOTE_MODULE = {
  tables: {
    approval: {
      tableName: "approval" as const,
      rowType: Approval.getTypeScriptAlgebraicType(),
    },
    judgment: {
      tableName: "judgment" as const,
      rowType: Judgment.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: (Judgment.getTypeScriptAlgebraicType() as __AlgebraicTypeVariants.Product).value.elements[0].algebraicType,
      },
    },
    mj_summary: {
      tableName: "mj_summary" as const,
      rowType: MjSummary.getTypeScriptAlgebraicType(),
      primaryKey: "optionId",
      primaryKeyInfo: {
        colName: "optionId",
        colType: (MjSummary.getTypeScriptAlgebraicType() as __AlgebraicTypeVariants.Product).value.elements[0].algebraicType,
      },
    },
    server_info: {
      tableName: "server_info" as const,
      rowType: ServerInfo.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: (ServerInfo.getTypeScriptAlgebraicType() as __AlgebraicTypeVariants.Product).value.elements[0].algebraicType,
      },
    },
    vote: {
      tableName: "vote" as const,
      rowType: Vote.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: (Vote.getTypeScriptAlgebraicType() as __AlgebraicTypeVariants.Product).value.elements[0].algebraicType,
      },
    },
    vote_access: {
      tableName: "vote_access" as const,
      rowType: VoteAccess.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: (VoteAccess.getTypeScriptAlgebraicType() as __AlgebraicTypeVariants.Product).value.elements[0].algebraicType,
      },
    },
    vote_option: {
      tableName: "vote_option" as const,
      rowType: VoteOption.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: (VoteOption.getTypeScriptAlgebraicType() as __AlgebraicTypeVariants.Product).value.elements[0].algebraicType,
      },
    },
  },
  reducers: {
    approve: {
      reducerName: "approve",
      argsType: Approve.getTypeScriptAlgebraicType(),
    },
    cast_judgment: {
      reducerName: "cast_judgment",
      argsType: CastJudgment.getTypeScriptAlgebraicType(),
    },
    create_vote: {
      reducerName: "create_vote",
      argsType: CreateVote.getTypeScriptAlgebraicType(),
    },
    delete_vote: {
      reducerName: "delete_vote",
      argsType: DeleteVote.getTypeScriptAlgebraicType(),
    },
    ensure_server_info: {
      reducerName: "ensure_server_info",
      argsType: EnsureServerInfo.getTypeScriptAlgebraicType(),
    },
    grant_access_by_token: {
      reducerName: "grant_access_by_token",
      argsType: GrantAccessByToken.getTypeScriptAlgebraicType(),
    },
    set_approval_ballot: {
      reducerName: "set_approval_ballot",
      argsType: SetApprovalBallot.getTypeScriptAlgebraicType(),
    },
    set_approvals: {
      reducerName: "set_approvals",
      argsType: SetApprovals.getTypeScriptAlgebraicType(),
    },
    submit_approval_ballot: {
      reducerName: "submit_approval_ballot",
      argsType: SubmitApprovalBallot.getTypeScriptAlgebraicType(),
    },
    submit_complete_judgment_ballot: {
      reducerName: "submit_complete_judgment_ballot",
      argsType: SubmitCompleteJudgmentBallot.getTypeScriptAlgebraicType(),
    },
    submit_judgment_ballot: {
      reducerName: "submit_judgment_ballot",
      argsType: SubmitJudgmentBallot.getTypeScriptAlgebraicType(),
    },
    unapprove: {
      reducerName: "unapprove",
      argsType: Unapprove.getTypeScriptAlgebraicType(),
    },
    withdraw_approval_ballot: {
      reducerName: "withdraw_approval_ballot",
      argsType: WithdrawApprovalBallot.getTypeScriptAlgebraicType(),
    },
    withdraw_judgments: {
      reducerName: "withdraw_judgments",
      argsType: WithdrawJudgments.getTypeScriptAlgebraicType(),
    },
  },
  versionInfo: {
    cliVersion: "1.6.0",
  },
  // Constructors which are used by the DbConnectionImpl to
  // extract type information from the generated RemoteModule.
  //
  // NOTE: This is not strictly necessary for `eventContextConstructor` because
  // all we do is build a TypeScript object which we could have done inside the
  // SDK, but if in the future we wanted to create a class this would be
  // necessary because classes have methods, so we'll keep it.
  eventContextConstructor: (imp: __DbConnectionImpl, event: __Event<Reducer>) => {
    return {
      ...(imp as DbConnection),
      event
    }
  },
  dbViewConstructor: (imp: __DbConnectionImpl) => {
    return new RemoteTables(imp);
  },
  reducersConstructor: (imp: __DbConnectionImpl, setReducerFlags: SetReducerFlags) => {
    return new RemoteReducers(imp, setReducerFlags);
  },
  setReducerFlagsConstructor: () => {
    return new SetReducerFlags();
  }
}

// A type representing all the possible variants of a reducer.
export type Reducer = never
| { name: "Approve", args: Approve }
| { name: "CastJudgment", args: CastJudgment }
| { name: "CreateVote", args: CreateVote }
| { name: "DeleteVote", args: DeleteVote }
| { name: "EnsureServerInfo", args: EnsureServerInfo }
| { name: "GrantAccessByToken", args: GrantAccessByToken }
| { name: "SetApprovalBallot", args: SetApprovalBallot }
| { name: "SetApprovals", args: SetApprovals }
| { name: "SubmitApprovalBallot", args: SubmitApprovalBallot }
| { name: "SubmitCompleteJudgmentBallot", args: SubmitCompleteJudgmentBallot }
| { name: "SubmitJudgmentBallot", args: SubmitJudgmentBallot }
| { name: "Unapprove", args: Unapprove }
| { name: "WithdrawApprovalBallot", args: WithdrawApprovalBallot }
| { name: "WithdrawJudgments", args: WithdrawJudgments }
;

export class RemoteReducers {
  constructor(private connection: __DbConnectionImpl, private setCallReducerFlags: SetReducerFlags) {}

  approve(voteId: number, optionId: number) {
    const __args = { voteId, optionId };
    let __writer = new __BinaryWriter(1024);
    Approve.serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("approve", __argsBuffer, this.setCallReducerFlags.approveFlags);
  }

  onApprove(callback: (ctx: ReducerEventContext, voteId: number, optionId: number) => void) {
    this.connection.onReducer("approve", callback);
  }

  removeOnApprove(callback: (ctx: ReducerEventContext, voteId: number, optionId: number) => void) {
    this.connection.offReducer("approve", callback);
  }

  castJudgment(optionId: number, mention: Mention) {
    const __args = { optionId, mention };
    let __writer = new __BinaryWriter(1024);
    CastJudgment.serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("cast_judgment", __argsBuffer, this.setCallReducerFlags.castJudgmentFlags);
  }

  onCastJudgment(callback: (ctx: ReducerEventContext, optionId: number, mention: Mention) => void) {
    this.connection.onReducer("cast_judgment", callback);
  }

  removeOnCastJudgment(callback: (ctx: ReducerEventContext, optionId: number, mention: Mention) => void) {
    this.connection.offReducer("cast_judgment", callback);
  }

  createVote(title: string, options: string[], visibility: number | undefined, votingSystem: VotingSystem | undefined, limitByIp: boolean | undefined) {
    const __args = { title, options, visibility, votingSystem, limitByIp };
    let __writer = new __BinaryWriter(1024);
    CreateVote.serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("create_vote", __argsBuffer, this.setCallReducerFlags.createVoteFlags);
  }

  onCreateVote(callback: (ctx: ReducerEventContext, title: string, options: string[], visibility: number | undefined, votingSystem: VotingSystem | undefined, limitByIp: boolean | undefined) => void) {
    this.connection.onReducer("create_vote", callback);
  }

  removeOnCreateVote(callback: (ctx: ReducerEventContext, title: string, options: string[], visibility: number | undefined, votingSystem: VotingSystem | undefined, limitByIp: boolean | undefined) => void) {
    this.connection.offReducer("create_vote", callback);
  }

  deleteVote(voteId: number) {
    const __args = { voteId };
    let __writer = new __BinaryWriter(1024);
    DeleteVote.serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("delete_vote", __argsBuffer, this.setCallReducerFlags.deleteVoteFlags);
  }

  onDeleteVote(callback: (ctx: ReducerEventContext, voteId: number) => void) {
    this.connection.onReducer("delete_vote", callback);
  }

  removeOnDeleteVote(callback: (ctx: ReducerEventContext, voteId: number) => void) {
    this.connection.offReducer("delete_vote", callback);
  }

  ensureServerInfo() {
    this.connection.callReducer("ensure_server_info", new Uint8Array(0), this.setCallReducerFlags.ensureServerInfoFlags);
  }

  onEnsureServerInfo(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("ensure_server_info", callback);
  }

  removeOnEnsureServerInfo(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("ensure_server_info", callback);
  }

  grantAccessByToken(token: string) {
    const __args = { token };
    let __writer = new __BinaryWriter(1024);
    GrantAccessByToken.serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("grant_access_by_token", __argsBuffer, this.setCallReducerFlags.grantAccessByTokenFlags);
  }

  onGrantAccessByToken(callback: (ctx: ReducerEventContext, token: string) => void) {
    this.connection.onReducer("grant_access_by_token", callback);
  }

  removeOnGrantAccessByToken(callback: (ctx: ReducerEventContext, token: string) => void) {
    this.connection.offReducer("grant_access_by_token", callback);
  }

  setApprovalBallot(voteId: number, optionIds: number[]) {
    const __args = { voteId, optionIds };
    let __writer = new __BinaryWriter(1024);
    SetApprovalBallot.serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("set_approval_ballot", __argsBuffer, this.setCallReducerFlags.setApprovalBallotFlags);
  }

  onSetApprovalBallot(callback: (ctx: ReducerEventContext, voteId: number, optionIds: number[]) => void) {
    this.connection.onReducer("set_approval_ballot", callback);
  }

  removeOnSetApprovalBallot(callback: (ctx: ReducerEventContext, voteId: number, optionIds: number[]) => void) {
    this.connection.offReducer("set_approval_ballot", callback);
  }

  setApprovals(voteId: number, optionIds: number[]) {
    const __args = { voteId, optionIds };
    let __writer = new __BinaryWriter(1024);
    SetApprovals.serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("set_approvals", __argsBuffer, this.setCallReducerFlags.setApprovalsFlags);
  }

  onSetApprovals(callback: (ctx: ReducerEventContext, voteId: number, optionIds: number[]) => void) {
    this.connection.onReducer("set_approvals", callback);
  }

  removeOnSetApprovals(callback: (ctx: ReducerEventContext, voteId: number, optionIds: number[]) => void) {
    this.connection.offReducer("set_approvals", callback);
  }

  submitApprovalBallot(voteId: number, optionId: number) {
    const __args = { voteId, optionId };
    let __writer = new __BinaryWriter(1024);
    SubmitApprovalBallot.serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("submit_approval_ballot", __argsBuffer, this.setCallReducerFlags.submitApprovalBallotFlags);
  }

  onSubmitApprovalBallot(callback: (ctx: ReducerEventContext, voteId: number, optionId: number) => void) {
    this.connection.onReducer("submit_approval_ballot", callback);
  }

  removeOnSubmitApprovalBallot(callback: (ctx: ReducerEventContext, voteId: number, optionId: number) => void) {
    this.connection.offReducer("submit_approval_ballot", callback);
  }

  submitCompleteJudgmentBallot(voteId: number, judgments: JudgmentEntry[]) {
    const __args = { voteId, judgments };
    let __writer = new __BinaryWriter(1024);
    SubmitCompleteJudgmentBallot.serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("submit_complete_judgment_ballot", __argsBuffer, this.setCallReducerFlags.submitCompleteJudgmentBallotFlags);
  }

  onSubmitCompleteJudgmentBallot(callback: (ctx: ReducerEventContext, voteId: number, judgments: JudgmentEntry[]) => void) {
    this.connection.onReducer("submit_complete_judgment_ballot", callback);
  }

  removeOnSubmitCompleteJudgmentBallot(callback: (ctx: ReducerEventContext, voteId: number, judgments: JudgmentEntry[]) => void) {
    this.connection.offReducer("submit_complete_judgment_ballot", callback);
  }

  submitJudgmentBallot(optionId: number, mention: Mention) {
    const __args = { optionId, mention };
    let __writer = new __BinaryWriter(1024);
    SubmitJudgmentBallot.serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("submit_judgment_ballot", __argsBuffer, this.setCallReducerFlags.submitJudgmentBallotFlags);
  }

  onSubmitJudgmentBallot(callback: (ctx: ReducerEventContext, optionId: number, mention: Mention) => void) {
    this.connection.onReducer("submit_judgment_ballot", callback);
  }

  removeOnSubmitJudgmentBallot(callback: (ctx: ReducerEventContext, optionId: number, mention: Mention) => void) {
    this.connection.offReducer("submit_judgment_ballot", callback);
  }

  unapprove(voteId: number, optionId: number) {
    const __args = { voteId, optionId };
    let __writer = new __BinaryWriter(1024);
    Unapprove.serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("unapprove", __argsBuffer, this.setCallReducerFlags.unapproveFlags);
  }

  onUnapprove(callback: (ctx: ReducerEventContext, voteId: number, optionId: number) => void) {
    this.connection.onReducer("unapprove", callback);
  }

  removeOnUnapprove(callback: (ctx: ReducerEventContext, voteId: number, optionId: number) => void) {
    this.connection.offReducer("unapprove", callback);
  }

  withdrawApprovalBallot(voteId: number, optionId: number) {
    const __args = { voteId, optionId };
    let __writer = new __BinaryWriter(1024);
    WithdrawApprovalBallot.serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("withdraw_approval_ballot", __argsBuffer, this.setCallReducerFlags.withdrawApprovalBallotFlags);
  }

  onWithdrawApprovalBallot(callback: (ctx: ReducerEventContext, voteId: number, optionId: number) => void) {
    this.connection.onReducer("withdraw_approval_ballot", callback);
  }

  removeOnWithdrawApprovalBallot(callback: (ctx: ReducerEventContext, voteId: number, optionId: number) => void) {
    this.connection.offReducer("withdraw_approval_ballot", callback);
  }

  withdrawJudgments(voteId: number) {
    const __args = { voteId };
    let __writer = new __BinaryWriter(1024);
    WithdrawJudgments.serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("withdraw_judgments", __argsBuffer, this.setCallReducerFlags.withdrawJudgmentsFlags);
  }

  onWithdrawJudgments(callback: (ctx: ReducerEventContext, voteId: number) => void) {
    this.connection.onReducer("withdraw_judgments", callback);
  }

  removeOnWithdrawJudgments(callback: (ctx: ReducerEventContext, voteId: number) => void) {
    this.connection.offReducer("withdraw_judgments", callback);
  }

}

export class SetReducerFlags {
  approveFlags: __CallReducerFlags = 'FullUpdate';
  approve(flags: __CallReducerFlags) {
    this.approveFlags = flags;
  }

  castJudgmentFlags: __CallReducerFlags = 'FullUpdate';
  castJudgment(flags: __CallReducerFlags) {
    this.castJudgmentFlags = flags;
  }

  createVoteFlags: __CallReducerFlags = 'FullUpdate';
  createVote(flags: __CallReducerFlags) {
    this.createVoteFlags = flags;
  }

  deleteVoteFlags: __CallReducerFlags = 'FullUpdate';
  deleteVote(flags: __CallReducerFlags) {
    this.deleteVoteFlags = flags;
  }

  ensureServerInfoFlags: __CallReducerFlags = 'FullUpdate';
  ensureServerInfo(flags: __CallReducerFlags) {
    this.ensureServerInfoFlags = flags;
  }

  grantAccessByTokenFlags: __CallReducerFlags = 'FullUpdate';
  grantAccessByToken(flags: __CallReducerFlags) {
    this.grantAccessByTokenFlags = flags;
  }

  setApprovalBallotFlags: __CallReducerFlags = 'FullUpdate';
  setApprovalBallot(flags: __CallReducerFlags) {
    this.setApprovalBallotFlags = flags;
  }

  setApprovalsFlags: __CallReducerFlags = 'FullUpdate';
  setApprovals(flags: __CallReducerFlags) {
    this.setApprovalsFlags = flags;
  }

  submitApprovalBallotFlags: __CallReducerFlags = 'FullUpdate';
  submitApprovalBallot(flags: __CallReducerFlags) {
    this.submitApprovalBallotFlags = flags;
  }

  submitCompleteJudgmentBallotFlags: __CallReducerFlags = 'FullUpdate';
  submitCompleteJudgmentBallot(flags: __CallReducerFlags) {
    this.submitCompleteJudgmentBallotFlags = flags;
  }

  submitJudgmentBallotFlags: __CallReducerFlags = 'FullUpdate';
  submitJudgmentBallot(flags: __CallReducerFlags) {
    this.submitJudgmentBallotFlags = flags;
  }

  unapproveFlags: __CallReducerFlags = 'FullUpdate';
  unapprove(flags: __CallReducerFlags) {
    this.unapproveFlags = flags;
  }

  withdrawApprovalBallotFlags: __CallReducerFlags = 'FullUpdate';
  withdrawApprovalBallot(flags: __CallReducerFlags) {
    this.withdrawApprovalBallotFlags = flags;
  }

  withdrawJudgmentsFlags: __CallReducerFlags = 'FullUpdate';
  withdrawJudgments(flags: __CallReducerFlags) {
    this.withdrawJudgmentsFlags = flags;
  }

}

export class RemoteTables {
  constructor(private connection: __DbConnectionImpl) {}

  get approval(): ApprovalTableHandle<'approval'> {
    // clientCache is a private property
    return new ApprovalTableHandle((this.connection as unknown as { clientCache: __ClientCache }).clientCache.getOrCreateTable<Approval>(REMOTE_MODULE.tables.approval));
  }

  get judgment(): JudgmentTableHandle<'judgment'> {
    // clientCache is a private property
    return new JudgmentTableHandle((this.connection as unknown as { clientCache: __ClientCache }).clientCache.getOrCreateTable<Judgment>(REMOTE_MODULE.tables.judgment));
  }

  get mjSummary(): MjSummaryTableHandle<'mj_summary'> {
    // clientCache is a private property
    return new MjSummaryTableHandle((this.connection as unknown as { clientCache: __ClientCache }).clientCache.getOrCreateTable<MjSummary>(REMOTE_MODULE.tables.mj_summary));
  }

  get serverInfo(): ServerInfoTableHandle<'server_info'> {
    // clientCache is a private property
    return new ServerInfoTableHandle((this.connection as unknown as { clientCache: __ClientCache }).clientCache.getOrCreateTable<ServerInfo>(REMOTE_MODULE.tables.server_info));
  }

  get vote(): VoteTableHandle<'vote'> {
    // clientCache is a private property
    return new VoteTableHandle((this.connection as unknown as { clientCache: __ClientCache }).clientCache.getOrCreateTable<Vote>(REMOTE_MODULE.tables.vote));
  }

  get voteAccess(): VoteAccessTableHandle<'vote_access'> {
    // clientCache is a private property
    return new VoteAccessTableHandle((this.connection as unknown as { clientCache: __ClientCache }).clientCache.getOrCreateTable<VoteAccess>(REMOTE_MODULE.tables.vote_access));
  }

  get voteOption(): VoteOptionTableHandle<'vote_option'> {
    // clientCache is a private property
    return new VoteOptionTableHandle((this.connection as unknown as { clientCache: __ClientCache }).clientCache.getOrCreateTable<VoteOption>(REMOTE_MODULE.tables.vote_option));
  }
}

export class SubscriptionBuilder extends __SubscriptionBuilderImpl<RemoteTables, RemoteReducers, SetReducerFlags> { }

export class DbConnection extends __DbConnectionImpl<RemoteTables, RemoteReducers, SetReducerFlags> {
  static builder = (): __DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext> => {
    return new __DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext>(REMOTE_MODULE, (imp: __DbConnectionImpl) => imp as DbConnection);
  }
  subscriptionBuilder = (): SubscriptionBuilder => {
    return new SubscriptionBuilder(this);
  }
}

export type EventContext = __EventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type ReducerEventContext = __ReducerEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type SubscriptionEventContext = __SubscriptionEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
export type ErrorContext = __ErrorContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
